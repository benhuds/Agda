{- Name: Bowornmet (Ben) Hudson

--Interpreting types as preorders--

-}

open import Preliminaries
open import Preorder

module Preorder-repackage where

  -- repackaging preorder as a type together with a Preorder structure on that type
  PREORDER = Σ (λ (A : Set) → Preorder-str A)

  MONOTONE : (PΓ PA : PREORDER) → Set
  MONOTONE (Γ , PΓ) (A , PA) = Monotone Γ A PΓ PA
  
  -- some operations
  _×p_ : PREORDER → PREORDER → PREORDER
  (A , PA) ×p (B , PB) = A × B , AxB-ispreorder A B PA PB

  _+p_ : PREORDER → PREORDER → PREORDER
  (A , PA) +p (B , PB) = Either A B , A+B-ispreorder A B PA PB

  _->p_ : PREORDER → PREORDER → PREORDER
  (A , PA) ->p (B , PB) = Monotone A B PA PB , monotone-ispreorder A B PA PB

  -- Unit is a preorder
  unit-p : PREORDER
  unit-p = Unit , preorder (λ x y → Unit) (λ x → <>) (λ x y z _ _ → <>) 

  -- identity preserves monotonicity
  id : ∀ {Γ} → MONOTONE Γ Γ
  id = λ {Γ} → monotone (λ x → x) (λ x y x₁ → x₁)

  -- composition preserves monotonicity
  comp : ∀ {PA PB PC} → MONOTONE PA PB → MONOTONE PB PC → MONOTONE PA PC
  comp (monotone f f-ismono) (monotone g g-ismono) =
          monotone (λ x → g (f x)) (λ x y x₁ → g-ismono (f x) (f y) (f-ismono x y x₁))

  -- proofs that types like pairs etc. with preorders are monotone
  pair' : ∀ {PΓ PA PB} → MONOTONE PΓ PA → MONOTONE PΓ PB → MONOTONE PΓ (PA ×p PB)
  pair' (monotone f f-ismono) (monotone g g-ismono) =
          monotone (λ x → f x , g x) (λ x y z → f-ismono x y z , g-ismono x y z)

  fst' : ∀ {PΓ PA PB} → MONOTONE PΓ (PA ×p PB) → MONOTONE PΓ PA
  fst' (monotone f f-ismono) = 
          monotone (λ x → fst (f x)) (λ x y z → fst (f-ismono x y z))

  snd' : ∀ {PΓ PA PB} → MONOTONE PΓ (PA ×p PB) → MONOTONE PΓ PB
  snd' (monotone f f-ismono) = 
          monotone (λ x → snd (f x)) (λ x y z → snd (f-ismono x y z))

  lam' : ∀ {PΓ PA PB} → MONOTONE (PΓ ×p PA) PB → MONOTONE PΓ (PA ->p PB)
  lam' {Γ , preorder ≤Γ reflΓ transΓ} {a , preorder ≤a refla transa} {b , preorder ≤b reflb transb} (monotone f f-ismono) =
          monotone (λ x → monotone (λ p → f (x , p)) (λ a b c → f-ismono (x , a) (x , b) (reflΓ x , c))) (λ x y z w → f-ismono (x , w) (y , w) (z , refla w))

  app' : ∀ {PΓ PA PB} → MONOTONE PΓ (PA ->p PB) → MONOTONE PΓ PA → MONOTONE PΓ PB
  app' {Γ , preorder ≤Γ reflΓ transΓ} {a , preorder ≤a refla transa} {b , preorder ≤b reflb transb} (monotone f f-ismono) (monotone g g-ismono) =
          monotone (λ x → Monotone.f (f x) (g x)) (λ x y z → transb (Monotone.f (f x) (g x)) (Monotone.f (f y) (g x)) (Monotone.f (f y) (g y))
          (f-ismono x y z (g x)) (Monotone.is-monotone (f y) (g x) (g y) (g-ismono x y z)))

  inl' : ∀ {PΓ PA PB} → MONOTONE PΓ PA → MONOTONE PΓ (PA +p PB)
  inl' (monotone f f-ismono) =
          monotone (λ x → Inl (f x)) (λ x y z → f-ismono x y z)

  inr' : ∀ {PΓ PA PB} → MONOTONE PΓ PB → MONOTONE PΓ (PA +p PB)
  inr' (monotone f f-ismono) =
          monotone (λ x → Inr (f x)) (λ x y z → f-ismono x y z)

  case : ∀ {A B C : Set} → (A → C) → (B → C) → (Either A B → C)
  case a b (Inl x) = a x
  case a b (Inr x) = b x

  el : PREORDER → Set
  el = fst

  PREORDER≤ : (PA : PREORDER) → el PA → el PA → Set
  PREORDER≤ PA = Preorder-str.≤ (snd PA)

  -- oh my god
  lemma : ∀ {PA PB PC} {c1 c2 : el (PA +p PB)} {f1 f2 : el (PA ->p PC)} {g1 g2 : el (PB ->p PC)}
        → (PREORDER≤ (PA +p PB) c1 c2)
        → (PREORDER≤ (PA ->p PC) f1 f2) 
        → (PREORDER≤ (PB ->p PC) g1 g2) 
        → (PREORDER≤ PC (case (Monotone.f f1) (Monotone.f g1) c1) (case (Monotone.f f2) (Monotone.f g2) c2))
  lemma {A , preorder ≤a refla transa} {B , preorder ≤b reflb transb} {C , preorder ≤c reflc transc}
        {Inl a1} {Inl a2}
        {monotone f1 f1-ismono} {monotone f2 f2-ismono}
        a b c = transc (f1 a1) (f1 a2) (f2 a2) (f1-ismono a1 a2 a) (b a2)
  lemma {PA} {PB} {PC} {Inl a1} {Inr b1} () b c
  lemma {PA} {PB} {PC} {Inr b1} {Inl a1} () b c
  lemma {A , preorder ≤a refla transa} {B , preorder ≤b reflb transb} {C , preorder ≤c reflc transc}
        {Inr b1} {Inr b2}
        {monotone f1 f1-ismono} {monotone f2 f2-ismono} {monotone g1 g1-ismono} {monotone g2 g2-ismono}
        a b c = transc (g1 b1) (g1 b2) (g2 b2) (g1-ismono b1 b2 a) (c b2)

  lemma2 : ∀ {PΓ PA PC} → MONOTONE (PΓ ×p PA) PC → el PΓ → MONOTONE PA PC
  lemma2 {Γ , preorder ≤Γ reflΓ transΓ} (monotone f f-ismono) q = monotone (λ a → f (q , a)) (λ x y z → f-ismono (q , x) (q , y) (reflΓ q , z))

  case' : ∀ {PΓ PA PB PC} → MONOTONE (PΓ ×p PA) PC -> MONOTONE (PΓ ×p PB) PC -> MONOTONE PΓ (PA +p PB) -> MONOTONE PΓ PC
  case' {Γ , preorder ≤Γ reflΓ transΓ} {a , preorder ≤a refla transa} {b , preorder ≤b reflb transb} {c , preorder ≤c reflc transc}
        (monotone f f-ismono) (monotone g g-ismono) (monotone h h-ismono) =
          monotone (λ x → case (λ a → f (x , a)) (λ b → g (x , b)) (h x))
            (λ x y z → lemma {a , preorder ≤a refla transa} {b , preorder ≤b reflb transb} {c , preorder ≤c reflc transc} {h x} {h y}
            {lemma2 {Γ , preorder ≤Γ reflΓ transΓ}
               {a , preorder ≤a refla transa} {c , preorder ≤c reflc transc}
               (monotone f f-ismono) x}
            {lemma2 {Γ , preorder ≤Γ reflΓ transΓ}
               {a , preorder ≤a refla transa} {c , preorder ≤c reflc transc}
               (monotone f f-ismono) y}
            {lemma2 {Γ , preorder ≤Γ reflΓ transΓ}
               {b , preorder ≤b reflb transb} {c , preorder ≤c reflc transc}
               (monotone g g-ismono) x}
            {lemma2 {Γ , preorder ≤Γ reflΓ transΓ}
               {b , preorder ≤b reflb transb} {c , preorder ≤c reflc transc}
               (monotone g g-ismono) y}
                         (h-ismono x y z) (λ a₁ → f-ismono (x , a₁) (y , a₁) (z , refla a₁)) (λ b₁ → g-ismono (x , b₁) (y , b₁) (z , reflb b₁)))